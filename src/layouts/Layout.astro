---
// 1. Behúzzuk a ViewTransitions komponenst
import '../styles/global.css';
import CookieBanner from '../components/CookieBanner.astro'; // <-- 1. Importálás


interface Props {
	title: string;
	description?: string; // Hozzáadtunk egy opcionális 'description' prop-ot az egyedi leírásokhoz
}

const { 
    title, 
    description = "Élményalapú tanulmányi utakat szervezünk a 'Határtalanul!' program keretében, amelyek örökre összekötik a diákokat a magyar kultúrával." 
} = Astro.props;
---
<!doctype html>
<html lang="hu" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Poppins:wght@700;800&display=swap" rel="stylesheet">
		<title>{title} | DOL Bt.</title>
	</head>
	<body class="bg-slate-50 text-slate-800 antialiased">
		<slot />        
		<CookieBanner />
		<script>
            // A scroll animációs szkripted változatlan maradt
            const animatedElements = document.querySelectorAll(".animate-on-scroll");
            
            const observer = new IntersectionObserver((entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add("is-visible");
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.1 });

            animatedElements.forEach((el) => observer.observe(el));
        </script>
	</body>
</html>